// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('agileMetrics').config(function(toastrConfig) {
    return angular.extend(toastrConfig, {
      autoDismiss: true,
      containerId: 'toast-container',
      maxOpened: 0,
      newestOnTop: true,
      positionClass: 'toast-top-center',
      preventDuplicates: false,
      preventOpenDuplicates: false,
      target: 'body'
    });
  });

  angular.module('agileMetrics').controller('usController', function($scope, elasticsearch, $interval, $filter, toastr, $cookies) {
    var formatDatetimes, indexPath;
    indexPath = 'http://10.40.48.48:9200/kanban';
    $scope.selectedTeam = $cookies.get('team') || 'Newborns';
    $scope.teams = {
      'Newborns': {
        fields: ['todo', 'developing', 'totest', 'testing', 'readyfordeploy', 'deploying', 'done']
      },
      'Old Skull': {
        fields: ['needsrefinement', 'todo', 'developing', 'totest', 'undersystemtest', 'readyfordeploy', 'partiallydeployed', 'done']
      },
      'Hardw√Ürwolves': {
        fields: []
      }
    };
    $scope.headers = ['id', 'role', 'estimated', 'costumer', 'release', 'class'];
    $scope.newTask = {};
    $scope.tasks = [];
    $scope.roles = ['US', 'BUG', 'REFACTORING', 'INFRA', 'SPIKE', 'TECHNICAL_DEBT', 'TIMED', 'FEATURE'];
    $scope.classes = ['DEFAULT', 'EXPEDITE', 'SELF-EXPIRING'];
    $scope.labels = {
      US: 'label label label-us',
      BUG: 'label label-bug',
      REFACTORING: 'label label-refactoring',
      INFRA: 'label label-infra',
      SPIKE: 'label label-spike',
      TECHNICAL_DEBIT: 'label label-technical_debit',
      TIMED: 'label label-timed',
      FEATURE: 'label label-feature'
    };
    $scope.changeSelectedTeam = function(selectedTeam) {
      $cookies.put('team', selectedTeam);
      $scope.newTask = {};
      return $scope.findTeamTasks(selectedTeam);
    };
    $scope.findTeamTasks = function(selectedTeam) {
      var findTasksConfig;
      findTasksConfig = {
        url: indexPath + "/" + (selectedTeam.toLowerCase()) + "/_search",
        query: {
          sort: {
            id: 'desc'
          },
          size: 1000
        }
      };
      return elasticsearch.post(findTasksConfig).success(function(response, statusCode) {
        var ref;
        if ((response != null) && statusCode === 200) {
          return $scope.tasks = (ref = response.hits) != null ? ref.hits.map(function(item) {
            var field, i, len, ref1;
            ref1 = $scope.teams[selectedTeam].fields;
            for (i = 0, len = ref1.length; i < len; i++) {
              field = ref1[i];
              item._source[field] = $filter('date')(item._source[field], 'dd/MM/yy HH:mm');
            }
            return item;
          }) : void 0;
        }
      }).error(function(msg) {
        return console.log(msg);
      });
    };
    $scope.createTask = function(task) {
      var newTaskConfig;
      $scope.newTask = {};
      $scope.addTaskForm = false;
      newTaskConfig = {
        url: indexPath + "/" + ($scope.selectedTeam.toLowerCase()) + "/" + (task.role.toUpperCase()) + task.id,
        query: formatDatetimes(task, $scope.selectedTeam)
      };
      return elasticsearch.post(newTaskConfig).success(function() {
        toastr.success('Success');
        return $scope.findTeamTasks($scope.selectedTeam);
      }).error(function(msg) {
        toastr.error(msg, 'Error');
        return $scope.findTeamTasks($scope.selectedTeam);
      });
    };
    $scope.deleteTask = function(id) {
      var deleteUrl;
      deleteUrl = indexPath + "/" + ($scope.selectedTeam.toLowerCase()) + "/" + id;
      return elasticsearch["delete"](deleteUrl).success(function() {
        toastr.success('Success');
        return $scope.findTeamTasks($scope.selectedTeam);
      }).error(function(msg) {
        toastr.error(msg, 'Error');
        return $scope.findTeamTasks($scope.selectedTeam);
      });
    };
    $scope.editTask = function(task) {
      $scope.addTaskForm = true;
      return $scope.newTask = task;
    };
    $scope.close = function() {
      $scope.addTaskForm = false;
      return $scope.newTask = {};
    };
    $interval(function() {
      return $scope.findTeamTasks($scope.selectedTeam);
    }, 1000);
    $scope.findTeamTasks($scope.selectedTeam);
    return formatDatetimes = function(task, team) {
      var field, i, len, ref;
      ref = $scope.teams[team].fields;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        task[field] = moment(task[field], 'DD/MM/YY HH:mm').isValid() ? moment(task[field], 'DD/MM/YY HH:mm').format() : null;
      }
      return task;
    };
  });

}).call(this);
